/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
import java_cup.runtime.*;

parser code {:
    // Connect this parser to a scanner!
    scanner s;
    Parser(scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
init with {: s.init(); :};
scan with {: return s.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            id,
		    int; 
terminal Integer    NUMBER;        // our scanner provides numbers as integers

/* Non terminals */
non terminal	    Program, 
		    Decl, 
		    VariableDecl, 
		    Variable, 
		    Type,
		    FunctionDecl, 
		    Formals,
		    ClassDecl,
		    idListItem,
		    Field,
		    InterfaceDecl,
		    MultiplePrototype,
		    Prototype,
		    StmtBlock,
		    MultipleVariableDecl,
		    MultipleStmt
		    Stmt,
		    IfStmt,
		    WhileStmt,
		    ForStmt,
		    BreakStmt,
		    ReturnStmt,
		    PrintStmt,
		    ExprListItem,
		    Expr,
		    Lvalue,
		    Call,
		    Actuals,
		    Constant;

non terminal Integer    expr;      // used to store evaluated subexpressions

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS;

/* The grammar rules */
expr_list ::= expr_list expr:e SEMI         {: System.out.println(e);:}
            | expr:e SEMI                   {: System.out.println(e);:}
;
expr      ::= expr:e1 PLUS  expr:e2         {: RESULT = e1+e2;       :}
             | expr:e1 MINUS expr:e2        {: RESULT = e1-e2;       :}
             | expr:e1 TIMES expr:e2        {: RESULT = e1*e2;       :}
             | MINUS expr:e                 {: RESULT = -e;          :}
  	     %prec UMINUS
       | LPAREN expr:e RPAREN	         {: RESULT = e;           :}
       | NUMBER:n	                     {: RESULT = n;           :}
             ;
