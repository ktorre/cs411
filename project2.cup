
/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
import java_cup.runtime.*;
import java.io.*;
import java_cup.runtime.ScannerBuffer;

parser code {:
    public Parser ( Lexer lex, ComplexSymbolFactory sf ) {
	super( lex, sf );
    }

    public static void main( String[] args ) throws Exception {
	ComplexSymbolFactory csf = new ComplexSymbolFactory();
	ScannerBuffer buff = new ScannerBuffer( new Lexer( new BufferedReader( new InputStreamReader( System.in ) ), csf ) );
	Parser p = new Parser( buff, csf );
	p.parse();
    }

:}

/* define how to connect to the scanner! */
//init with {: s.init(); :};
//scan with {: return s.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal	_boolean,
		_break,
		_class,
		_double,
		_else,
		_no_else,
		_extends,
		_for,
		_if,
		_implements,
		_int,
		_interface,
		_newarray,
		_println,
		_readln,
		_return,
		_string,
		_void,
		_while,
		_plus,
		_minus,
		_uminus,
		_multiplication,
		_division,
		_mod,
		_less,
		_lessequal,
		_greater,
		_greaterequal,
		_equal,
		_notequal,
		_and,
		_or,
		_not,
		_assignop,
		_semicolon,
		_comma,
		_period,
		_leftparen,
		_rightparen,
		_leftbracket,
		_rightbracket,
		_leftbrace,
		_rightbrace,
		_intconstant,
		_doubleconstant,
		_stringconstant,
		_booleanconstant,
		_id;

/* Non terminals */
non terminal	    Program,
		    Decl,
		    VariableDecl,
		    Variable,
		    Type,
		    FunctionDecl,
		    Formals,
		    ClassDecl,
		    IdListItem,
		    Field,
		    InterfaceDecl,
		    MultiplePrototype,
		    Prototype,
		    StmtBlock,
		    MultipleVariableDecl,
		    MultipleStmt,
		    Stmt,
		    IfStmt,
		    WhileStmt,
		    ForStmt,
		    BreakStmt,
		    ReturnStmt,
		    PrintStmt,
		    ExprListItem,
		    Expr,
		    Lvalue,
		    Call,
		    Actuals,
		    Constant,
		    Extra;

/* Precedences */
precedence nonassoc _no_else;
precedence nonassoc _else;

precedence left _assignop;
precedence left _or;
precedence left _and;
precedence left _equal,
		_notequal;
precedence left _less,
		_lessequal,
		_greater,
		_greaterequal;
precedence left _plus,
		_minus;
precedence left _multiplication,
		_division,
		_mod;
precedence left _not,
		_uminus;
precedence left _leftbrace,
		_rightbrace,
		_period;

/* The grammar rules */
Program ::= Decl {:System.out.println("Program ::= Decl");:}
;
Decl ::= VariableDecl Decl {:System.out.println("Decl ::= VariableDecl Decl");:}
       | FunctionDecl Decl {:System.out.println("Decl ::= FunctionDecl Decl");:}
       | ClassDecl Decl {:System.out.println("Decl ::= ClassDecl Decl");:}
       | InterfaceDecl Decl {:System.out.println("Decl ::= InnerfaceDecl Decl");:}
       | VariableDecl {:System.out.println("Decl ::= VariableDecl");:}
       | FunctionDecl {:System.out.println("Decl ::= FunctionDecl");:}
       | ClassDecl {:System.out.println("Decl ::=  ClassDecl");:}
       | InterfaceDecl {:System.out.println("Decl ::= InterfaceDecl");:}
;
VariableDecl ::= Variable _semicolon {:System.out.println("VariableDecl ::= Variable _semicolon");:}
;
Variable ::= Type _id {:System.out.println("Variable ::= Type _id");:}
	   | _id _id {:System.out.println("Variable ::= _id _id");:}
;
Extra ::= _id _leftbracket {:System.out.println("Extra ::= _id _leftbracket");:}
;
Type ::= _int {:System.out.println("Type ::= _int");:}
       | _double {:System.out.println("Type ::= _double");:}
       | _boolean {:System.out.println("Type ::= _boolean");:}
       | _string {:System.out.println("Type ::= _string");:}
       | Type _leftbracket _rightbracket {:System.out.println("Type ::= Type _leftbracket _rightbracket");:}
       | Extra _rightbracket {:System.out.println("Type ::= Extra _rightbracket");:}
;
FunctionDecl ::= Type _id _leftparen Formals _rightparen StmtBlock {:System.out.println("FunctionDecl ::= Type _id _leftparen Formals _rightparen StmtBlock");:}
	       | _id _id _leftparen Formals _rightparen StmtBlock {:System.out.println("FunctionDecl ::= _id _id _leftparen Formals _rightparen StmtBlock");:}
	       | _void _id _leftparen Formals _rightparen StmtBlock {:System.out.println("FunctinoDecl ::= _void _id _leftparen Formals _rightparen StmtBlock");:}
	       | Type _id _leftparen _rightparen StmtBlock {:System.out.println("FunctionDecl ::= Type _id _leftparen _rightparen StmtBlock");:}
	       | _id _id _leftparen _rightparen StmtBlock {:System.out.println("FunctionDecl ::= _id _id _leftparen _rightparen StmtBlock");:}
	       | _void _id _leftparen _rightparen StmtBlock {:System.out.println("FunctionDecl ::= _void _id _leftparen _rightparen StmtBlock");:}
;
Formals ::= Variable {:System.out.println("Formals ::= Variable");:}
	  | Variable _comma Formals {:System.out.println("Formals ::= Variable _comma Formals");:}
;
ClassDecl ::= _class _id _leftbrace Field _rightbrace {:System.out.println("ClassDecl ::= _class _id _leftbrace Field _rightbrace");:}
	    | _class _id _extends _id _leftbrace Field _rightbrace {:System.out.println("ClassDecl ::= _class _id _extends _id _leftbrace Field _rightbrace");:}
	    | _class _id _implements IdListItem _leftbrace Field _rightbrace {:System.out.println("ClassDecl ::= _class _id _implements IdListItem _leftbrace Field _rightbrace");:}
	    | _class _id _implements _id _leftbrace Field _rightbrace {:System.out.println("ClassDecl ::= _class _id _implements _id _leftbrace Field _rightbrace");:}
	    | _class _id _extends _id _implements IdListItem _leftbrace Field _rightbrace {:System.out.println("ClassDecl ::= _class _id _extends _id _implements IdListItem _leftbrace Field _rightbrace");:}
	    | _class _id _extends _id _implements _id _leftbrace Field _rightbrace {:System.out.println("ClassDecl ::= _class _id _extends _id _implements _id _leftbrace Field _rightbrace");:}
	    | _class _id _leftbrace _rightbrace {:System.out.println("ClassDecl ::= _class _id _leftbrace _rightbrace");:}
	    | _class _id _extends _id _leftbrace _rightbrace {:System.out.println("ClassDecl ::= _class _id _extends _id _leftbrace _rightbrace");:}
	    | _class _id _implements IdListItem _leftbrace _rightbrace {:System.out.println("ClassDecl ::= _class _id _implements IdListItem _leftbrace _rightbrace");:}
	    | _class _id _implements _id _leftbrace _rightbrace {:System.out.println("ClassDecl ::= _class _id _implements _id _leftbrace _rightbrace");:}
	    | _class _id _extends _id _implements IdListItem _leftbrace _rightbrace {:System.out.println("ClassDecl ::= _class _id _extends _id _implements IdListItem _leftbrace _rightbrace");:}
	    | _class _id _extends _id _implements _id _leftbrace _rightbrace {:System.out.println("ClassDecl ::= _class _id _extends _id _implements _id _leftbrace _rightbrace");:}
;
IdListItem ::= _id _comma IdListItem {:System.out.println("IdListItem ::= _id _comma IdListItem");:}
;
Field ::= VariableDecl Field {:System.out.println("Field ::= VariableDecl Field");:}
	| FunctionDecl Field {:System.out.println("Field ::=  FunctionDecl Field");:}
	| VariableDecl {:System.out.println("Field ::= VariableDecl");:}
	| FunctionDecl {:System.out.println("Field ::= FunctionDecl");:}
;
InterfaceDecl ::= _interface _id _leftbrace MultiplePrototype _rightbrace {:System.out.println("InterfaceDecl ::= _interface _id _leftbrace MultiplePrototype _rightbrace");:}
		| _interface _id _leftbrace _rightbrace {:System.out.println("InterfaceDecl ::= _interface _id _leftbrace _rightbrace");:}
;
MultiplePrototype ::= MultiplePrototype Prototype {:System.out.println("MultiplePrototype ::= MultiplePrototype Prototype");:}
		    | Prototype {:System.out.println("MultiplePrototype ::= Prototype");:}
;
Prototype ::= Type _id _leftparen Formals _rightparen _semicolon {:System.out.println("Prototype ::= Type _id _leftparen Formals _rightparen _semicolon");:}
	    | _id _id _leftparen Formals _rightparen _semicolon {:System.out.println("Prototype ::= _id _id _leftparen Formals _rightparen _semicolon");:}
	    | _void _id _leftparen Formals _rightparen _semicolon {:System.out.println("Prototype ::= _void _id _leftparen Formals _rightparen _semicolon");:}
	    | Type _id _leftparen _rightparen _semicolon {:System.out.println("Prototype ::= Type _id _leftparen _rightparen _semicolon");:}
	    | _id _id _leftparen _rightparen _semicolon {:System.out.println("Prototype ::= _id _id _leftparen _rightparen _semicolon");:}
	    | _void _id _leftparen _rightparen _semicolon {:System.out.println("Prototype ::= _void _id _leftparen _rightparen _semicolon");:}
;
StmtBlock ::= _leftbrace MultipleVariableDecl MultipleStmt _rightbrace {:System.out.println("StmtBlock ::= _leftbrace MultipleVariableDecl MultipleStmt _rightbrace");:}
	    | _leftbrace MultipleVariableDecl _rightbrace {:System.out.println("StmtBlock ::= _leftbrace MultipleVariableDecl _rightbrace");:}
	    | _leftbrace MultipleStmt _rightbrace {:System.out.println("StmtBlock ::= _leftbrace MultipleStmt _rightbrace");:}
	    | _leftbrace _rightbrace {:System.out.println("StmtBlock ::= _leftbrace _rightbrace");:}
;
MultipleVariableDecl ::= MultipleVariableDecl VariableDecl {:System.out.println("MultipleVariableDecl ::= MultipleVariableDecl VariableDecl");:}
		       | VariableDecl {:System.out.println("MultipleVariableDecl ::= VariableDecl");:}
;
MultipleStmt ::= MultipleStmt Stmt {:System.out.println("MultipleStmt ::= MultipleStmt Stmt");:}
	       | Stmt {:System.out.println("MultipleStmt ::= Stmt");:}
;
Stmt ::= _semicolon {:System.out.println("Stmt ::= _semicolon");:}
       | Expr _semicolon {:System.out.println("Stmt ::= Expr _semicolon");:}
       | IfStmt {:System.out.println("Stmt ::= IfStmt");:}
       | WhileStmt {:System.out.println("Stmt ::= WhileStmt");:}
       | ForStmt {:System.out.println("Stmt ::= ForStmt");:}
       | BreakStmt {:System.out.println("Stmt ::= BreakStmt");:}
       | ReturnStmt {:System.out.println("Stmt ::= ReturnStmt");:}
       | PrintStmt {:System.out.println("Stmt ::= PrintStmt");:}
       | StmtBlock {:System.out.println("Stmt ::= StmtBlock");:}
;
IfStmt ::= _if _leftparen Expr _rightparen Stmt %prec _no_else 
	 | _if _leftparen Expr _rightparen Stmt _else Stmt {:System.out.println("IfStmt ::= _if _leftparen Expr _rightparen Stmt _else Stmt");:}
;
WhileStmt ::= _while _leftparen Expr _rightparen Stmt{:System.out.println("WhileStmt ::= _while _leftparen Expr _rightparen Stm");:}
;
ForStmt ::= _for _leftparen _semicolon Expr _semicolon _rightparen Stmt{:System.out.println("ForStmt ::= _for _leftparen _semicolon Expr _semicolon _rightparen Stm");:}
	  | _for _leftparen Expr _semicolon Expr _semicolon _rightparen Stmt{:System.out.println("ForStmt ::= _for _leftparen Expr _semicolon Expr _semicolon _rightparen Stm");:}
	  | _for _leftparen _semicolon Expr _semicolon Expr _rightparen Stmt{:System.out.println("ForStmt ::= _for _leftparen _semicolon Expr _semicolon Expr _rightparen Stm");:}
	  | _for _leftparen Expr _semicolon Expr _semicolon Expr _rightparen Stmt{:System.out.println("ForStmt ::= _for _leftparen Expr _semicolon Expr _semicolon Expr _rightparen Stm");:}
;
BreakStmt ::= _break _semicolon{:System.out.println("BreakStmt ::= _break _semicolo");:}
;
ReturnStmt ::= _return _semicolon{:System.out.println("ReturnStmt ::= _return _semicolo");:}
	     | _return Expr _semicolon{:System.out.println("ReturnStmt ::= _return Expr _semicolo");:}
;
PrintStmt ::= _println _leftparen ExprListItem _rightparen _semicolon{:System.out.println("PrintStmt ::= _println _leftparen ExprListItem _rightparen _semicolo");:}
;
ExprListItem ::= Expr _comma ExprListItem{:System.out.println("ExprListItem ::= Expr _comma ExprListIte");:}
	       | Expr{:System.out.println("ExprListItem ::= Exp");:}
;
Expr ::= Lvalue _assignop Expr{:System.out.println("Expr ::= Lvalue _assignop Expr");:}
       | _id _assignop Expr{:System.out.println("Expr ::= _id _assignop Expr");:}
       | Constant{:System.out.println("Expr ::= Constant");:}
       | Lvalue{:System.out.println("Expr ::= Lvalue");:}
       | _id{:System.out.println("Expr ::= _id");:}
       | Call{:System.out.println("Expr ::= Call");:}
       | _leftparen Expr _rightparen{:System.out.println("Expr ::= _leftparen Expr _rightparen");:}
       | Expr _plus Expr{:System.out.println("Expr ::= Expr _plus Expr");:}
       | Expr _minus Expr{:System.out.println("Expr ::= Expr _minus Expr");:}
       | Expr _multiplication Expr{:System.out.println("Expr ::= Expr _multiplication Expr");:}
       | Expr _division Expr{:System.out.println("Expr ::= Expr _division Expr");:}
       | Expr _mod Expr{:System.out.println("Expr ::= Expr _mod Expr");:}
       | _minus Expr %prec _uminus
       | Expr _less Expr{:System.out.println("Expr ::= Expr _less Expr");:}
       | Expr _lessequal Expr{:System.out.println("Expr ::= Expr _lessequal Expr");:}
       | Expr _greater Expr{:System.out.println("Expr ::= Expr _greater Expr");:}
       | Expr _greaterequal Expr{:System.out.println("Expr ::= Expr _greaterequal Expr");:}
       | Expr _equal Expr{:System.out.println("Expr ::= Expr _equal Expr");:}
       | Expr _notequal Expr{:System.out.println("Expr ::= Expr _notequal Expr");:}
       | Expr _and Expr{:System.out.println("Expr ::= Expr _and Expr");:}
       | Expr _or Expr{:System.out.println("Expr ::= Expr _or Expr");:}
       | _not Expr{:System.out.println("Expr ::= _not Expr");:}
       | _readln _leftparen _rightparen{:System.out.println("Expr ::= _readln _leftparen _rightparen");:}
       | _newarray _leftparen _intconstant _comma Type _rightparen{:System.out.println("Expr ::= _newarray _leftparen _intconstant _comma Type _rightparen");:}
       | _newarray _leftparen _intconstant _comma _id _rightparen{:System.out.println("Expr ::= _newarray _leftparen _intconstant _comma _id _rightparen");:}
;
Lvalue ::= Lvalue _leftbracket Expr _rightbracket{:System.out.println("Lvalue ::= Lvalue _leftbracket Expr _rightbracket");:}
	 | Lvalue _period _id{:System.out.println("Lvalue ::= Lvalue _period _id");:}
	 | Extra Expr _rightbracket{:System.out.println("Lvalue ::= Extra Expr _rightbracket");:}
;
Call ::= _id _leftparen Actuals _rightparen{:System.out.println("Call ::= _id _leftparen Actuals _rightparen");:}
       | _id _period _id _leftparen Actuals _rightparen{:System.out.println("Call ::= _id _period _id _leftparen Actuals _rightparen");:}
       | _id _leftparen _rightparen{:System.out.println("Call ::= _id _leftparen _rightparen");:}
       | _id _period _id _leftparen _rightparen{:System.out.println("Call ::= _id _period _id _leftparen _rightparen");:}
;
Actuals ::= ExprListItem{:System.out.println("Actuals ::= ExprListItem");:}
;
Constant ::= _intconstant {:System.out.println("Constant ::= _intconstant");:}
	   | _doubleconstant{:System.out.println("Constant ::= _doubleconstant");:}
	   | _stringconstant{:System.out.println("Constant ::= _stringconstant");:}
	   | _booleanconstant{:System.out.println("Constant ::= _booleanconstant");:}
;
